// Top-level build file where you can add configuration options common to all sub-projects/modules.
//在根项目中移入全局管理配置文件

apply plugin: 'com.alibaba.arouter'

buildscript {
    ext.kotlin_version = '1.3.72'
    ext.anko_version = '0.10.8'
    //配置我们工程的仓库地址
    repositories {

        //使用阿里云仓库服务，代码同步快
        maven {
            url "http://maven.aliyun.com/nexus/content/groups/public/"
        }
        google()
        //jcenter是一个声明仓库的源，之前版本则是mavenCentral(),
        // jcenter可以理解成是一个新的中央远程仓库，兼容maven中心仓库，而且性能更优。
        jcenter()
        //jcenter()和mavenCentral()是Android Studio中Gradle插件使用的仓库
        mavenCentral()

        //私有maven地址配置(一般是公司搭建的存储库)
        maven {
            url 'https://maven.google.com/'

            name 'Google'
        }

        maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
        /*maven {
            url 'https://esri.bintray.com/arcgis'
            name "alias name"
            //如果需要验证需要添加验证信息
            credentials {
                username = 'joe'
                password = 'secret'
            }
        }*/
    }
    //配置我们工程的 '插件'依赖地址,
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.2'


        //jar包快速上传仓库
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'

        //使用谷歌服务
        classpath 'com.google.gms:google-services:4.3.3'


        //  日志调试工具的插件依赖
        //  classpath 'com.wolearn:ajcplugin:1.0.1'

        // 数据库GreenDao
        classpath 'org.greenrobot:greendao-gradle-plugin:3.3.0' // add plugin

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files


        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"



        //再说一个，为了提高性能，我们可以在我们的project gradle中添加
        classpath "com.alibaba:arouter-register:1.0.2"
    }
}

allprojects {
    repositories {
        //使用阿里云仓库服务，代码同步快
        maven {
            url "http://maven.aliyun.com/nexus/content/groups/public/"
        }
        google()
        jcenter()
        //远程maven仓库中心
        mavenCentral()
        maven { url 'https://jitpack.io' }
        /*maven {
            url 'https://esri.bintray.com/arcgis'
            name "alias name"
        }*/

        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
        maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }

    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}


String cmd = 'gradle.bat -v'

task openNotePad {
    setGroup("study")
    setDescription("执行外部命令打开记事本")
    doFirst {
        def sourceFile = getProjectDir().absolutePath + "\\gradle\\wrapper\\gradle-wrapper.jar"
        def targetFile = getProjectDir().absolutePath + "\\gradle"
        //adb instal 命令
        def command = "mv -f ${sourceFile} ${targetFile}"
        def stdout = new ByteArrayOutputStream()
        def cmdResult = cmd.execute().text.trim()
        println cmdResult
        try {
            //调用 exec 方法执行这个命令
            exec {
                ExecSpec execSpec ->
                    workingDir rootProject.rootDir
                    //配置闭包的内容
                    execSpec.executable 'sh'

//                    execSpec.args '-c', command
                    //commandLine "mv","-f",${sourceFile},${targetFile}
//                    commandLine "cmd","mv", "-f", ${sourceFile}, ${targetFile}
                    commandLine command
                    standardOutput = stdout
            }
            println stdout.toString()
            //执行完之后，打印一句话
            println "command execute success"
        } catch (Exception e) {
            e.printStackTrace()
            //执行完之后，打印一句话
            println "command execute fail"
        }

    }
}



